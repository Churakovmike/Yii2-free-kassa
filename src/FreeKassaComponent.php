<?php

namespace ChurakovMike\Freekassa;

use ChurakovMike\Freekassa\exceptions\WrongSignatureException;
use yii\base\Component;
use yii\httpclient\Client;
use yii\httpclient\CurlTransport;
use \Exception;

/**
 * Class FreeKassaComponent.
 * @package ChurakovMike\Freekassa
 *
 * @property string $baseUrl
 * @property string $merchantId
 * @property string $firstSecret
 * @property string $secondSecret
 * @property string $walletId
 * @property Client $httpClient
 */
class FreeKassaComponent extends Component
{
    /**
     * Codes of available currencies.
     */
    const
        CURRENCY_VISA_MASTERCARD_KZT = 186,
        CURRENCY_FK_WALLET_RUB = 133,
        CURRENCY_SBERBANK_RUR = 80,
        CURRENCY_MASTERCARD_VISA_RUB = 179,
        CURRENCY_QIWI_WMZ = 155,
        CURRENCY_QIWI_WMR = 63,
        CURRENCY_QIWI_EURO = 161,
        CURRENCY_QIWI_USD = 123,
        CURRENCY_YANDEX_MONEY_FIRST = 45,
        CURRENCY_YANDEX_MONEY_SECOND = 175,
        CURRENCY_QIWI_KZT = 162,
        CURRENCY_VISA_MASTERCARD_RUB_PLUS = 153,
        CURRENCY_CARD_P2P = 159,
        CURRENCY_CASA_MASTERCARD_RUB = 94,
        CURRENCY_VISA_MASTERCARD_USD = 100,
        CURRENCY_VISA_MASTERCARD_EUR = 124,
        CURRENCY_VISA_MASTERCARD = 160,
        CURRENCY_TETHER_USDT = 181,
        CURRENCY_VISA_MASTERCARD_UAH = 67,
        CURRENCY_ADVCASH_KZT = 184,
        CURRENCY_ADVCASH_USD = 136,
        CURRENCY_ADVCASH_RUB = 150,
        CURRENCY_ADVCASH_EUR = 183,
        CURRENCY_EXMO_RUB = 180,
        CURRENCY_EXMO_USD = 174,
        CURRENCY_LITECOIN = 147,
        CURRENCY_BITCOINCASH_ABC = 166,
        CURRENCY_MONERO = 172,
        CURRENCY_RIPPLE = 173,
        CURRENCY_ETHEREUM = 163,
        CURRENCY_BLACKCOIN_BLK = 167,
        CURRENCY_DOGECOIN_DOGE = 168,
        CURRENCY_EMERCOIN_EMC = 169,
        CURRENCY_PRIMECOIN_XMP = 170,
        CURRENCY_REDCOIN_RDD = 171,
        CURRENCY_ZCASH = 165,
        CURRENCY_DASH = 164,
        CURRENCY_BITCOIN = 116,
        CURRENCY_SKIN_PAY = 154,
        CURRENCY_WMZ_BILL = 131,
        CURRENCY_WEBMONEY_WMZ = 2,
        CURRENCY_WEBMONEY_WME = 3,
        CURRENCY_PAYEER_RUB = 114,
        CURRENCY_PAYEER_USD = 115,
        CURRENCY_PERFECT_MONEY_USD = 64,
        CURRENCY_PERFECT_MONEY_EUR = 69,
        CURRENCY_ALFA_BANK_RUR = 79,
        CURRENCY_PROMSVYAZBANK = 110,
        CURRENCY_RUSSIAN_STANDART = 113,
        CURRENCY_MOBILE_MEGAFON = 82,
        CURRENCY_MOBILE_MTS = 84,
        CURRENCY_MOBILE_TELE2 = 132,
        CURRENCY_MOBILE_BEELINE = 83,
        CURRENCY_TERMINAL = 99,
        CURRENCY_VISA_MC_INT = 158,
        CURRENCY_VISA_UAH_CASHOUT = 157,
        CURRENCY_SALON = 118,
        CURRENCY_TRANSFERS = 117,
        CURRENCY_PAYPAL = 70,
        CURRENCY_MOBILE_MEGAFON_NORTH_WEST_FILIAL = 137,
        CURRENCY_MOBILE_MEGAFON_SIBERIAN_FILIAL = 138,
        CURRENCY_MOBILE_MEGAFON_KAUKAZ_FILIAL = 139,
        CURRENCY_MOBILE_MEGAFON_POVOLZSKIY_FILIAL = 140,
        CURRENCY_MOBILE_MEGAFON_URAL_FILIAL = 141,
        CURRENCY_MOBILE_MEGAFON_DALNIYVOSTOK_FILIAL = 142,
        CURRENCY_MOBILE_MEGAFON_CENTRAL_FILIAL = 143;

    /**
     * List of available actions.
     */
    const
        ACTION_GET_BALANCE = 'get_balance',
        ACTION_GET_ORDER = 'check_order_status';

    /**
     * Free-Kassa api url.
     *
     * @var string $baseUrl
     */
    public $baseUrl = 'https://www.free-kassa.ru/api.php';

    /**
     * Merchant ID. (example: 19999).
     *
     * @var string $merchantId
     */
    public $merchantId;

    /**
     * First secret ket generated by setting.
     *
     * @var string $firstSecret
     */
    public $firstSecret;

    /**
     * Second secret ket generated by setting.
     *
     * @var string $secondSecret
     */
    public $secondSecret;

    /**
     * Personal wallet identity.
     *
     * @var string $walletId
     */
    public $walletId;

    /**
     * @var Client $_httpClient
     */
    private $_httpClient;

    /**
     * FreeKassaComponent constructor.
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        parent::__construct($config);
    }

    /**
     * @return mixed
     * @throws \yii\base\InvalidConfigException
     */
    public function getHttpClient(): Client
    {
        if (!is_object($this->_httpClient)) {
            $this->_httpClient = \Yii::createObject($this->defaultHttpClientConfig());
        }

        return $this->_httpClient;
    }

    /**
     * Default settings for client.
     *
     * @return array
     */
    protected function defaultHttpClientConfig(): array
    {
        return [
            'class' => Client::class,
            'baseUrl' => $this->baseUrl,
            'transport' => CurlTransport::class,
        ];
    }

    /**
     * Check wallet balance.
     *
     * @return array|Response
     * @throws \Exception
     */
    public function getBalance()
    {
        $data = [
            'merchant_id' => $this->merchantId,
            's' => md5($this->merchantId . $this->secondSecret),
            'action' => self::ACTION_GET_BALANCE,
        ];

        return $this->request($data);
    }

    /**
     * @return array|Response
     * @throws Exception
     */
    public function getOrder()
    {
        $data = [
            'merchant_id' => $this->merchantId,
            's' => md5($this->merchantId . $this->secondSecret),
            'intid' => 'номер заказа на сервисе free-kassa',
            'order_id' => 'номер заказа магазина',
            'action' => self::ACTION_GET_ORDER,
        ];

        return $this->request($data);
    }

    /**
     * Generate signature with amount and order_id.
     *
     * @param $amount
     * @param $orderId
     * @return string
     */
    public function generateSignature($amount, $orderId): string
    {
        return md5($this->merchantId . ':' . $amount . ':' . $this->secondSecret . ':' . $orderId);
    }

    /**
     * Validate signature.
     *
     * @param $amount
     * @param $orderId
     * @param $sign
     * @return bool
     * @throws WrongSignatureException
     */
    public function validateSignature($amount, $orderId, $sign): bool
    {
        if ($this->generateSignature($amount, $orderId) !== $sign) {
            throw new WrongSignatureException('Invalid signature received');
        }
        
        return true;
    }

    /**
     * Base request with parameters.
     *
     * @param array $data
     * @param array $options
     * @throws \Exception
     * @return Response|array
     */
    protected function request(array $data, $options = [])
    {
        $fullData = array_merge($this->defaultRequestData(), $data);
        $rowData = http_build_query($fullData);
        $headers = $this->getHeaders($rowData);

        try {
            $request = $this->httpClient->post($this->httpClient->baseUrl, $rowData, $headers, $options);
            $response = $request->send();
            if (!$response->isOk) {
                throw new Exception($response->data);
            }

            return $response->data;
        } catch (\Exception $exception) {
            \Yii::error([
                'errorMessage' => $exception->getMessage(),
                'data' => $fullData,
                'dataRow' => $rowData,
                'headers' => $headers
            ]);

            throw $exception;
        }
    }

    /**
     * Full list currencies key => name.
     *
     * @return array
     */
    public function getCurrencies(): array
    {
        return [
            self::CURRENCY_VISA_MASTERCARD_KZT => 'VISA/MASTERCARD KZT',
            self::CURRENCY_FK_WALLET_RUB => 'FK WALLET RUB',
            self::CURRENCY_SBERBANK_RUR => 'Сбербанк RUR',
            self::CURRENCY_MASTERCARD_VISA_RUB => 'MASTERCARD/VISA RUB',
            self::CURRENCY_QIWI_WMZ => 'QIWI WALLET',
            self::CURRENCY_QIWI_WMR => 'QIWI кошелек',
            self::CURRENCY_QIWI_EURO => 'QIWI EURO',
            self::CURRENCY_QIWI_USD => 'QIWI USD',
            self::CURRENCY_YANDEX_MONEY_FIRST => 'Яндекс.Деньги',
            self::CURRENCY_YANDEX_MONEY_SECOND => 'Яндекс-Деньги',
            self::CURRENCY_QIWI_KZT => 'QIWI KZT',
            self::CURRENCY_VISA_MASTERCARD_RUB_PLUS => 'VISA/MASTERCARD+ RUB',
            self::CURRENCY_CARD_P2P => 'CARD P2P',
            self::CURRENCY_CASA_MASTERCARD_RUB => 'VISA/MASTERCARD RUB',
            self::CURRENCY_VISA_MASTERCARD_USD => 'VISA/MASTERCARD USD',
            self::CURRENCY_VISA_MASTERCARD_EUR => 'VISA/MASTERCARD EUR',
            self::CURRENCY_VISA_MASTERCARD => 'VISA/MASTERCARD',
            self::CURRENCY_TETHER_USDT => 'Tether USDT',
            self::CURRENCY_VISA_MASTERCARD_UAH => 'VISA/MASTERCARD UAH',
            self::CURRENCY_ADVCASH_KZT => 'ADVCASH KZT',
            self::CURRENCY_ADVCASH_USD => 'ADVCASH USD',
            self::CURRENCY_ADVCASH_RUB => 'ADVCASH RUB',
            self::CURRENCY_ADVCASH_EUR => 'ADVCASH EUR',
            self::CURRENCY_EXMO_RUB => 'Exmo RUB',
            self::CURRENCY_EXMO_USD => 'Exmo USD',
            self::CURRENCY_LITECOIN => 'Litecoin',
            self::CURRENCY_BITCOINCASH_ABC => 'BitcoinCash ABC',
            self::CURRENCY_MONERO => 'Monero',
            self::CURRENCY_RIPPLE => 'Ripple',
            self::CURRENCY_ETHEREUM => 'Ethereum',
            self::CURRENCY_BLACKCOIN_BLK => 'Blackcoin BLK',
            self::CURRENCY_DOGECOIN_DOGE => 'Dogecoin DOGE',
            self::CURRENCY_EMERCOIN_EMC => 'Emercoin EMC',
            self::CURRENCY_PRIMECOIN_XMP => 'Primecoin XMP',
            self::CURRENCY_REDCOIN_RDD => 'Reddcoin RDD',
            self::CURRENCY_ZCASH => 'ZCASH',
            self::CURRENCY_DASH => 'DASH',
            self::CURRENCY_BITCOIN => 'Bitcoin',
            self::CURRENCY_SKIN_PAY => 'Skin pay',
            self::CURRENCY_WMZ_BILL => 'WMZ-bill',
            self::CURRENCY_WEBMONEY_WMZ => 'WebMoney WMZ',
            self::CURRENCY_WEBMONEY_WME => 'WebMoney WME',
            self::CURRENCY_PAYEER_RUB => 'PAYEER RUB',
            self::CURRENCY_PAYEER_USD => 'PAYEER USD',
            self::CURRENCY_PERFECT_MONEY_USD => 'Perfect Money USD',
            self::CURRENCY_PERFECT_MONEY_EUR => 'Perfect Money EUR',
            self::CURRENCY_ALFA_BANK_RUR => 'Альфа-банк RUR',
            self::CURRENCY_PROMSVYAZBANK => 'Промсвязьбанк',
            self::CURRENCY_RUSSIAN_STANDART => 'Русский стандарт',
            self::CURRENCY_MOBILE_MEGAFON => 'Мобильный Платеж Мегафон',
            self::CURRENCY_MOBILE_MTS => 'Мобильный Платеж МТС',
            self::CURRENCY_MOBILE_TELE2 => 'Мобильный Платеж Tele2',
            self::CURRENCY_MOBILE_BEELINE => 'Мобильный Платеж Билайн',
            self::CURRENCY_TERMINAL => 'Терминалы России',
            self::CURRENCY_VISA_MC_INT => 'VISA/MC INT',
            self::CURRENCY_VISA_UAH_CASHOUT => 'VISA UAH CASHOUT',
            self::CURRENCY_SALON => 'Салоны связи',
            self::CURRENCY_TRANSFERS => 'Денежные переводы',
            self::CURRENCY_PAYPAL => 'PayPal',
            self::CURRENCY_MOBILE_MEGAFON_NORTH_WEST_FILIAL => 'Мобильный Платеж МегаФон Северо-Западный филиал',
            self::CURRENCY_MOBILE_MEGAFON_SIBERIAN_FILIAL => 'Мобильный Платеж МегаФон Сибирский филиал',
            self::CURRENCY_MOBILE_MEGAFON_KAUKAZ_FILIAL => 'Мобильный Платеж МегаФон Кавказский филиал',
            self::CURRENCY_MOBILE_MEGAFON_POVOLZSKIY_FILIAL => 'Мобильный Платеж МегаФон Поволжский филиал',
            self::CURRENCY_MOBILE_MEGAFON_URAL_FILIAL => 'Мобильный Платеж МегаФон Уральский филиал',
            self::CURRENCY_MOBILE_MEGAFON_DALNIYVOSTOK_FILIAL => 'Мобильный Платеж МегаФон Дальневосточный филиал',
            self::CURRENCY_MOBILE_MEGAFON_CENTRAL_FILIAL => 'Мобильный Платеж МегаФон Центральный филиал',
        ];
    }

    /**
     * Return currency name by code.
     *
     * @param $code
     * @return mixed
     */
    public function getCurrencyName($code): string
    {
        return $this->getCurrencies()[$code];
    }

    /**
     * Default request params.
     * @return array
     */
    private function defaultRequestData() : array
    {
        return [];
    }

    /**
     * Default request headers.
     * @param string $data
     * @return array
     */
    private function getHeaders(string $data) : array
    {
        return [];
    }
}
